Στο κεφάλαιο 3 θα δούμε τους βρόχους επανάληψης. Στον προγρμματισμό πολλες φορές ενα κομμάτι κώδικα πρέπει να εκτελεσθεί περισσότερες απο μια φορές. Οι εντολές for, 
while και do-while είναι αυτές με τις οποίες καταφέρνουμε την επανάληψη του ίδιου τμήματος κώδικα όσο μια συνθήκη παραμένει αληθής. Η συγκεκριμένη ενότητα είναι πιό δύσκολή
απο τις δύο προηγούμενες και θέλει περισσότερη προσοχή και εξάσκηση. Μην απογοητευτείς αν δεν τα κατανοήσεις με την πρώτη επαφή.  

3.1 Η Εντολή for
Η εντολή for επιτρέπει στον κώδικα που βρίσκεται ανάμεσα στα άγκιστρα της να επαναλαμβάνεται όσο μια συνθήκη παραμένει αληθής.
Πότε επιλέγουμε να χρησιμοποιήσουμε for;
Όταν γνωρίζουμε τον αριθμό επαναλήψεων.
Η σύνταξη της είναι η εξής:
 for(αρχική_έκφραση; συνθήκη; τελική εκφραση) 
{
	/*Οι εντολές που εκτελούνται όσο η συνθήκη είναι αληθής */
}

Σημείωση 1: Οι τρείς εκφράσεις μπορούν να είναι οποιαδήποτε έγκυρη έκφραση της C. 
 
Η εντολή for εκτελείται ως εξής:

Η αρχική_εκφραση εκτελείται μόνο κατα την έναρξη της for. Πρόκειται συνήθως για μια εντολή εκχώρησης η οποία αρχικοποιεί κάποια μεταβλητή που χρησιμοποιείται
αργότερα απο τις αλλες δυο εκφράσεις. Έπειτα ελέγχεται η τιμή της συνθήκης και αν είναι αληθής η επανάληψη συνέχιζεται και εκτελείται το κομάτι εντολών που βρίσκονται 
μέσα στα άγκιστρα. Άν είναι ψευδής, ο βρόχος for τερματίζεται και εκτελούνται οι εντολές μετα τα άγκιστρα. Τέλος εκτελείται η τελική_έκφραση η οποία συνήθως είναι ενα βήμα
καθώς αλλάζει την τιμή κάποιας μεταβλητής που χρησιμοποιείται στη συνθήκη. Ο βρόχος εκτελείται μέχρι η συνθήκη να γίνεις ψευδής.

Π.χ
#include <stdio.h>
int main() 
{
    int x;
    for(x = 0; x < 3; x++) 
	{
	    printf("%d ", x);
	}
	return 0;
}

Θα αναλύσουμε την λειτουργία του παραπάνω προγράμματος:
Πρώτα εκτελείται η εντολή "x = 0;", έπειτα ελέγχεται αν η συνθήκη "x < 3;" είναι αληθής και αν είναι το πρόγραμμα τυπώνει στην οθόνη το x δλδ 0.
Έπειτα η τιμή του x αυξάνεται κατα ένα αφου εκτελείται η εντολή "x++", άρα το x τώρα είναι 1. Ελέγχεται πάλι η συνθήκη και βλέπουμε οτι 1 < 3 που είναι αληθής. Άρα
τυπώνεται στην οθόνη η τιμη του x δηλαδή 1 και αυξάνεται ξανά η τιμή του κατα ένα. Τώρα η τιμή του x είναι 2, άρα ελέγχεται για άλλη μια φορα η συνθήκη και διαπιστώνουμε
οτι είναι αληθής εφόσον 2 < 3. Οπότε το πρόγραμμα τυπώνει την τιμή του x η οποία είναι 2. Μετά ξανά αυξάνεται το x κατα ένα και η τιμή του γίνεται 3. Ελέγχεται τώρα πάλι η συνθήκη
, όμως διαπιστώνουμε οτι είναι ψευδής διότι το 3 είναι ισο με το 3 και όχι μικρότερο, άρα ο βρόχος τερματίζεται και δεν τυπώνεται κατι αλλο στην οθόνη. 



3.2 Η Εντολή while
Η εντολή while αποτελεί τον πιο απλό τρόπο για να δημιουργήσει κανείς επαναληπτικό βρόχο. Την χρησιμοποιούμε συνήθως όταν δεν γνωρίζουμε τον αριθμό επαναλήψεων.
Η σύνταξη της είναι η εξής:
while(συνθήκη)
{
	/*εντολές που εκτελούνται όσο η συνθήκη παραμένει αληθής*/
}

Για να εκτελεσθεί μιαεντολή while ελέγχεται πρώτα η συνθήκη της και αν είναι αληθής τότε εκτελούνται και οι εντολές μέσα στα άγκιστρα. Έπειτα η συνθήκη ξανα ελέγχεται εώς
ότου γίνει ψευδής και τερματιστεί ο βρόχος. Στο παρακάτω πρόγραμμα με την χρήση της εντολής while εμφανίζονται στην οθόνη οι αριθμοί απο το 1 μέχρι το 5. Μόλις το x
γίνει ίσο με 11 ο βρόχος τερματίζεται και το πρόγραμμα επίσης.

Π.χ
#include <stdio.h>
int main() 
{
    int x = 1;
    while(x <= 5)
    {
	printf("%d\n", x);
	x++;
    }
    return 0;
}


3.3 Η Εντολη do-while
Αντίθετα με τους δύο προηγούμενους βρόχους που είδαμε που ο έλεγχος της συνθήκης γινόταν στην αρχή της επανάληψης, στον  βρόχο do-while γίνεται στο τέλος. Άρα ο βρόχος 
do-while εκτελείται τουλάχιστον μια φορά.

Η σύνταξη του είναι η εξής:
do 
{
    /*εντολες που εκτελούνται τουλάχιστον μια φορα και όσο η συνθήκη παραμένει αληθής */
} while(συνθήκη);

Η εκτέλεση γίνεται ώς εξής:
Πρώτα εκτελούνται οι εντολές μέσα στα άγκιστρα και έπειτα γίνεται ο έλεγχος της συνθήκης. Αν είναι αληθής τότε η επανάληψη συνεχίζεται και εκτελούνται ξανά οι εντολές και γίνεται πάλι
ο έλεγχος της συνθήκης. Αν είναι ψευδής τότε ο βρόχος τερματίζεται. Συνήθωςο βρόχος do=while χρησιμοποιείται λιγότερο απο τους αλλους δυο βρόχους που είδαμε προηγουμένως
επειδή μπορεί να αντικατασταθεί απο αυτούς.

Σημείωση 2: Στο τέλος της εντολής do-while μπαίνει ερωτηματικό ";".

Στο παρακάτω πρόγραμμα χρησιμοποιείται η εντολή do=while ώστε να εμφανισθούν οι αριθμοί απο το 1 μέχρι το 5.
Π.χ
#include <stdio.h>
int main()
{
    int x = 1;
    do 
    {
	printf("%d\n", x);
	x++;
    } while(x <= 5);

    return 0;
}

QUIZ 

(1) Τι θα πρέπει να γράψουμε μέσα στην for ώστε να εμφανίζει τους ακέραιους με αντίστροφη σειρά απο το 5 μέχρι το 1;
# include <stdio.h>
int main() {
	int i;
	for(..........) {
		printf("%d ");	
	}

	return 0;
}

Α. (i = 1; i <= 5; i++)
Β. (i = 5; i >= 1; i--) ~
Γ. (i = 5; i >= 1; --i)
Δ. (i = 1; i <= 5; ++i)

(2) Όταν ξέρουμε τον αριθμό των επαναλήψεων, ποιόν βρόχο επανάληψης προτιμάμε;

Α. do-while
Β. while
Γ. if
Δ. for ~

(3) Όταν δεν ξέρουμε τον αριθμό των επαναλήψεων, ποιόν βρόχο επανάληψης προτιμάμε;

Α. do-while
Β. while ~
Γ. if
Δ. for

(4) Ποιός απο τους παρακάτω βρόχους επανάληψης εκτελείται τουλάχιστον μια φορά;

Α. do-while ~
Β. while
Γ. if
Δ. for

(5) Ποιά είναι η έξοδος του παρακάτω προγράμματος;
#include <stdio.h>
int main() {
	int x = 5;
	while(x != 0) {
		printf("%d ", x);
		x++;
	}
	return 0;
}

Α. 0 1 2 3 4 5
Β. 5 4 3 2 1 0 
Γ. 5 4 3 2 1 ~
Δ. 1 2 3 4 5

(6) Πόσες φορές εκελείται ο while βρόχος;
#include <stdio.h>
int main() {
	int a = 256, b = 4;
	while(a != b) {
		b = b*b
	}
	return 0;
}

Α. 3 φορές
Β. 0 φορές
Γ. 20 φορες
Δ. 2 φορές ~


(7) Ποιά συνθήκη πρέπει να προστεθεί στη εντολή while ώστε το πρόγραμμα να εμφανίσει τους αριθμούς απο το 1 μέχρι το 5;
#include <stdio.h>
int main() {
	int x = 1;
	do{
		printf("%d\n", x);
		x++;
	} while(.......);
	return 0;
}

Α. i < 5
Β. i <= 5 ~
Γ. i <= 5;
Δ. i < 5;


(8) Συμπληρώστε τις εντολές ώστε τι πρόγραμμα να εμφανίζει την λέξη "Correct" τόσες φορές όσες και ο ακέραιος που θα δωθεί ως είσοδο.
#include <stdio.h>
int main() {
	int i, number;
	printf("Enter number: ");
	scanf("%d", &number);
	i = 1;
	do { ......
	} while(i <= number);
	return 0;
}

Α. printf("Correct\n");
   i++
Β. i++;
Γ. printf("Correct\n");
Δ. printf("Correct\n"); ~
   i++;

public GameObject currentQuestion4;
public int curQuestion4 = 0;

public int totalQuestions4 = 33;
currentQuestion4.GetComponent<Text>().text = curQuestion4 + " / " + totalQuestions4;

